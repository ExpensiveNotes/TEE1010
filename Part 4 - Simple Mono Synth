/* FCB 1010 Teensy 4.1 Modification  ----- TEE1010
   By John Melki-Wegner (aka Expensive Notes)
   Simple Mono Synth Version
   Three Modes:
   1. Synth - Press and release a pedal (1-8) for a note
   2. Latch Mode - Tap a Pedal to start a note - No need to hold it which is good for guitar players
   3. Arp Mode - Tap a pedal to initiate an arp - Arp pattern and length can be varied up to 8 notes
*/

//=== Audio ========================================================================= Audio
//Design Tool: https://www.pjrc.com/teensy/gui/
#include <Audio.h>
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <SerialFlash.h>

// GUItool: begin automatically generated code
AudioSynthWaveform       waveform1;      //xy=103,336
AudioFilterLadder        ladder1;        //xy=255,376
AudioPlayMemory          playMem1;       //xy=389,3524
AudioEffectEnvelope      envelope1;      //xy=420,406
AudioOutputI2S           i2s1;           //xy=746,384
AudioConnection          patchCord1(waveform1, 0, ladder1, 0);
AudioConnection          patchCord2(ladder1, envelope1);
AudioConnection          patchCord3(envelope1, 0, i2s1, 0);
AudioConnection          patchCord4(envelope1, 0, i2s1, 1);
AudioControlSGTL5000     sgtl5000_1;     //xy=467,90
// GUItool: end automatically generated code

// ==== General ===================================================================== General
//modes
byte pedalMode = 0;
#define numModes  3
const char pedalModeNames[numModes][4] = {"Syn", "Lat", "Arp"};// Char array number of strings then size of each string
int t1, t2; //Times to make sure the BPM delay is consistent.

// ===== Hardware =================================================================== Hardware

// ---- Analogue -------------------------------------------------------------------- Analogue
int potPin [6] = {A0, A8, A14, A15, A16, A17};   // Input pins from the 4 potentiometers and from 16 and 17 the expression pedals
int potVals [6]; //input values from pots

// ---- Switches -------------------------------------------------------------------- Switches
#define numberSwitches 15

//define switch names
#define foot1 0
#define foot2 1
#define foot3 2
#define foot4 3
#define foot5 4
#define foot6 5
#define foot7 35  //should be 30 except for soldering issue
#define foot8 31
#define foot9 32
#define foot10 33
#define footUp 36
#define footDown 37
#define button1 26
#define button2 27
#define button3 34
#define modeSwitch 8
#define enterSwitch 9
#define downSwitch 10
#define upSwitch 11
#define b1Switch 12
#define b2Switch 13
#define b3Switch 14

//Storage for Buttons/Foot Pedals
const int switchPins[numberSwitches] = {foot1,  foot2, foot3, foot4, foot5, foot6, foot7, foot8, foot9, foot10, footUp, footDown, button1, button2, button3}; // Note that the last five positions represent footUp, footDown and the three additional switches respectively
int previousSwitchValues [numberSwitches]; //used to avoid retriggering synth during looping - Not using bounce library due to varying length of waitTimes and due to it being a footpedal (secondary instrument)
int switchValues [numberSwitches];

//--- Oled Screen ------------------------------------------------------------------- Oled Screen
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET     4 // Reset pin # 
#define SCREEN_ADDRESS 0x3C // Found using scanner

//Initialize OLED screen. Changed Wire to Wire2 for SCL2 and SDA2
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire2, OLED_RESET);

// === MIDI and Music ========================================================================= MIDI and Music
//Using MIDI Note numbers
//#include <MIDI.h>
//MIDI_CREATE_INSTANCE(HardwareSerial, Serial7, MIDI); //to send MIDI out
//int channel = 1;
//byte midi_clock = 0xf8;//sent 3 times per 8th note
////byte startMIDI = 0xfa;
//byte stopMIDI = 0xfc; //MIDI stop

//Music Stuff
byte BPM = 250;//Beats per Minute, I make the maximum 250 later
int waitTime = 40; //Time between sending MIDI clock bytes
int spareTime = 40; //Time left after processes are done that needs to be padded/wasted while waiting for mext beat/note

int rootNote = 36, lowestNote = 24, highestNote = 80;
//Map 128 MIDI notes to actual frequencies for A = 440Hz
const float noteFreqs[128] = {8.176, 8.662, 9.177, 9.723, 10.301, 10.913, 11.562, 12.25, 12.978, 13.75, 14.568, 15.434, 16.352, 17.324, 18.354, 19.445, 20.602, 21.827, 23.125, 24.5, 25.957, 27.5, 29.135, 30.868, 32.703, 34.648, 36.708, 38.891, 41.203, 43.654, 46.249, 48.999, 51.913, 55, 58.27, 61.735, 65.406, 69.296, 73.416, 77.782, 82.407, 87.307, 92.499, 97.999, 103.826, 110, 116.541, 123.471, 130.813, 138.591, 146.832, 155.563, 164.814, 174.614, 184.997, 195.998, 207.652, 220, 233.082, 246.942, 261.626, 277.183, 293.665, 311.127, 329.628, 349.228, 369.994, 391.995, 415.305, 440, 466.164, 493.883, 523.251, 554.365, 587.33, 622.254, 659.255, 698.456, 739.989, 783.991, 830.609, 880, 932.328, 987.767, 1046.502, 1108.731, 1174.659, 1244.508, 1318.51, 1396.913, 1479.978, 1567.982, 1661.219, 1760, 1864.655, 1975.533, 2093.005, 2217.461, 2349.318, 2489.016, 2637.02, 2793.826, 2959.955, 3135.963, 3322.438, 3520, 3729.31, 3951.066, 4186.009, 4434.922, 4698.636, 4978.032, 5274.041, 5587.652, 5919.911, 6271.927, 6644.875, 7040, 7458.62, 7902.133, 8372.018, 8869.844, 9397.273, 9956.063, 10548.08, 11175.3, 11839.82, 12543.85};
//Scale Intervals
const byte majorScale[15]         = {0, 2, 4, 5, 7, 9, 11, 12, 14, 16, 17, 19, 21, 23, 24}; //e.g. D, E, F#,G, A, B, C#, D.  Two Octaves for Arpegiator
const byte harmonicMinorScale[15] = {0, 2, 3, 5, 7, 8, 11, 12, 14, 15, 17, 19, 20, 23, 24}; //e.g. D, E, F, G, A, Bâ™­, C, D.
bool playMajorScale = false;
const char keys [12][3] = {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"};//display current key. Display doesn't like the flat symbol 3 Chars needed for each element for null?
char displayChar [4]; //To display the current key to the screen

//Arpegiator
int arpRootNote = 36;
int arpLength = 4;
int currentArpNote = 0;
int currentArpPattern = 0;
const byte numberArpPatterns = 8;
byte arpNotes [8] = {0, 2, 4, 2, 4, 6, 7, 4};
const byte arpPatterns[numberArpPatterns][8] = { {0, 2, 4, 7, 0, 2, 4, 6}, {7, 6, 4, 2, 0, 2, 4, 2}, {0, 2, 0, 4, 0, 6, 0, 7}, {0, 7, 0, 6, 0, 4, 0, 2}, {0, 2, 4, 2, 4, 0, 2, 4}, {0, 2, 4, 2, 4, 6, 7, 4}, {2, 4, 0, 2, 4, 7, 0, 4}, {2, 4, 0, 2, 4, 6, 7, 4}};

int tickCounter = 0;// To count MIDI clock ticks so Beats can be placed. 3 ticks to the 8th Note

// ==== SetUp ======================================================================= SetUp
void setup() {
  //USB Serial for debugging
  Serial.begin(9600);                     //Serial Monitor
  //MIDI Serial in and out
  //  Serial7.begin(31250);                   //MIDI baud rate
  //  Serial7.write(stopMIDI);                // just in case
  //  MIDI.begin(MIDI_CHANNEL_OMNI);          // Launch MIDI and listen

  //--- Switches --------------------------------------------
  for (int i = 0; i < numberSwitches; i++) {
    pinMode(switchPins[i], INPUT_PULLUP);
  }

  //--- Screen ------------------------------------------------
  //   SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever
  }

  //--- Audio -----------------------------------------------
  AudioMemory(10);// 10 is more than enough for the mono synth
  sgtl5000_1.enable();                    //Using Line Out so don't need to set volume for this
  waveform1.begin(WAVEFORM_SAWTOOTH);     //Choosing this waveform. There are many others.
  ladder1.octaveControl(2.6);             // up 2.6 octaves (4850 Hz) & down 2.6 octaves (132 Hz)

  for (int i = 0; i < 10; i++) previousSwitchValues[i] = HIGH; //indicate not previously pressed
}

// === Loop ========================================================================= Loop

void loop() {
  t1 = millis(); //start time for consistent delay
  readSwitches();
  readPots();
  showScreen();
  //playing arp mode?
  if (pedalMode == 2 && tickCounter % 3 == 0) playArpNote(); //playing 8th Notes

  int t2 = millis(); //To enable the calculation of how long have the previous tasks taken
  spareTime = waitTime - (t2 - t1); //How much slack time is there
  while (t2 - t1 < waitTime) { //While waiting check MIDI in and Expression pedals
    //checkMIDIin();
    checkExpressionPedals(); //checking inside this loop to improve the smoothness of filter sweeps
    t2 = millis();
  }
  //After waiting the right amount send MIDI clock
  //  Serial7.write(midi_clock);
  tickCounter++;
  if (tickCounter >= 24) tickCounter = 0;
}


// === Play Notes =========================================================================== Play Notes

//Normal playing of a note in Synth and Latch Mode
void initiateNote(int i) {
  AudioNoInterrupts(); //Disable the audio library update interrupt. This allows more than 1 object's settings to be changed simultaneously.
  if (playMajorScale) waveform1.frequency(noteFreqs[rootNote + majorScale[i]]);
  else waveform1.frequency(noteFreqs[rootNote + harmonicMinorScale[i]]);
  envelope1.noteOn();
  AudioInterrupts();
}

//Playing a note in Arp Mode
void playArpNote() {
  AudioNoInterrupts();
  envelope1.noteOff();
  if (playMajorScale) waveform1.frequency(noteFreqs[arpRootNote + majorScale[arpNotes [currentArpNote]]]);
  else waveform1.frequency(noteFreqs[arpRootNote + harmonicMinorScale[arpNotes [currentArpNote]]]);
  envelope1.noteOn();
  AudioInterrupts();
  currentArpNote++;
  if (currentArpNote >= arpLength) currentArpNote = 0;
}

// === Hardware =========================================================================== Hardware

bool switchJustPressed(int i) {
  if (previousSwitchValues[i] == HIGH && switchValues[i] == LOW) return true;           //newly pressed
  return false;
}

bool switchJustReleased(int i) {
  if (previousSwitchValues[i] == LOW && switchValues[i] == HIGH) return true; //Just Released
  return false;
}

void readSwitches() {
  //Check the Switches that play a note? ----------------------
  for (int i = 0; i < 8; i++) {
    switchValues[i] = digitalRead(switchPins[i]);
    //Switch pressed?
    if (switchJustPressed(i)) {
      if (pedalMode == 2) { //arp mode. Set chord root
        arpRootNote = rootNote + i;
      }
      if (pedalMode == 1) {
        envelope1.noteOff();//latch mode and arp mode
        initiateNote(i);
      }
      if (pedalMode == 0) initiateNote(i);
      previousSwitchValues[i] = LOW;
    }

    //Switch released?
    if (switchJustReleased(i)) {
      if (pedalMode == 0) envelope1.noteOff();//not latch mode
      previousSwitchValues[i] = HIGH;
    }
  } //End of Play a note


  //check the other switches ------------------------------
  for (int i = 8; i < numberSwitches; i++) {
    switchValues[i] = digitalRead(switchPins[i]);
    //Switch pressed?
    if (switchJustPressed(i)) {
      //Change Mode
      if (i == modeSwitch) {
        pedalMode++;
        if (pedalMode >= numModes) pedalMode = 0;
        envelope1.noteOff(); //Turn off note if changing mode to avoid lingering notes
      }
      if (i == enterSwitch && pedalMode == 1) {
        envelope1.noteOff();// latch mode - turn off note
      }
      if (i == b1Switch) playMajorScale = !playMajorScale;
      if (i == b2Switch) {
        rootNote--;
        if (rootNote < lowestNote) rootNote = lowestNote;
      }
      if (i == b3Switch) {
        rootNote++;
        if (rootNote > highestNote) rootNote = highestNote;
      }
      //Up and Down change octave if Synth or Latched Synth chosen
      if (pedalMode <= 1) {
        if (i == downSwitch) {
          rootNote = rootNote - 12;
          if (rootNote < lowestNote) rootNote = lowestNote;
        }
        //up
        if (i == upSwitch) {
          rootNote = rootNote + 12;
          if (rootNote > highestNote) rootNote = highestNote;
        }
      }
      //Up and Down change arpegio if arp mode
      if (pedalMode == 2) {
        if (i == downSwitch) {
          arpLength--;
          if (arpLength < 2) arpLength = 2;
        }
        //up
        if (i == upSwitch) {
          arpLength++;
          if (arpLength > 8) arpLength = 8;
        }
        if (i == enterSwitch) { //Change Arp Pattern
          currentArpPattern++;
          if (currentArpPattern >= numberArpPatterns) currentArpPattern = 0;
          for (int i = 0; i < 8; i++) {
            arpNotes[i] = arpPatterns[currentArpPattern][i];
          }
        }
      }
      previousSwitchValues[i] = LOW;
    }
    //Switch released?
    if (switchJustReleased(i)) {
      previousSwitchValues[i] = HIGH;
    }
  }
}

void readPots() {
  for (int i = 0; i < 4; i++) {
    potVals[i] = analogRead(potPin[i]);
  }
  BPM = map( potVals[0] , 0, 1023, 20, 250); //sets maximum to 250
  waitTime = int(60000 / BPM / 6); //Time between MIDI clock out
  //check volume
  float vol = 2 * float((potVals[1] - 40)) / 1023;
  waveform1.amplitude(vol);
  checkExpressionPedals();
}

//need to check these more often due to waittime. Otherwise we get a more stepped change in sound when sweeping frequencies
void checkExpressionPedals() {
  //read expression pedals
  potVals[4] = analogRead(potPin[4]);
  potVals[5] = analogRead(potPin[5]);
  float res = float((potVals[4] - 40)) / 1000;//needs to be 0 to 1 in value
  ladder1.resonance(res);
  ladder1.frequency(potVals[5] * 3);
}

// === Screen =========================================================================== Screen

void showScreen() {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE); // Draw white text
  display.setCursor(0, 0);
  //Display mode
  display.println(pedalModeNames [pedalMode]); //What mode is current
  //BPM
  display.setCursor(45, 0);
  display.println(BPM);

  display.setCursor(90, 0);
  strcpy(displayChar, keys[(rootNote - lowestNote) % 12]);
  if (!playMajorScale) strcat(displayChar, "m");
  display.println(displayChar);

  //Octave
  display.setCursor(90, 20);
  display.println(rootNote);

  //Arp Length
  if (pedalMode == 2) {
    display.setCursor(0, 20);
    display.println(arpLength);
    display.setCursor(20, 20);
    display.println(currentArpPattern);
  }

  //Show pedal use by mode. Help.
  if (pedalMode == 1) {       //Normal Synth Mode
    display.setTextSize(1);
    display.setCursor(0, 40);
    display.println("Enter: Stop Note");
  }
  if (pedalMode <= 1) {       //latch mode
    display.setTextSize(1);
    display.setCursor(0, 50);
    display.println("Up/Dn: Octave");
  }
  if (pedalMode == 2) {       //arp mode
    display.setTextSize(1);
    display.setCursor(0, 50);
    display.println("Up/Dn: Pattern Length");
    display.setTextSize(1);
    display.setCursor(0, 40);
    display.println("Enter: Change Pattern");
  }

  //---- diagnostic stuff that doesn't need to be there.
  int iMem = AudioMemoryUsageMax();
  display.setCursor(45, 25);
  display.println(iMem);
  display.setTextSize(1);
  display.setCursor(65, 25);
  display.println(spareTime);
  // ----

  display.display();
}

// === MID  =========================================================================== MIDI
//void checkMIDIin() {
//  if (MIDI.read()) {
//    byte type = MIDI.getType();
//    //something will happen here eventually
//  }
//}

//=== Debug =========================
void s(String txt, float num) {
  Serial.print(txt);
  Serial.print(": ");
  Serial.println(num);
}
